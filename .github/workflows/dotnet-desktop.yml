name: .NET Core Desktop

permissions:
  contents: write
  issues: write # to write releases

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [Any CPU]

    runs-on: windows-latest

    env:
      Solution_Name: KadampaScreenSaver.sln
      Project_Directory: KadampaScreenSaver

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath KadampaScreenSaver_TemporaryKey.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: Extract version from csproj
        shell: pwsh
        run: |
          $csprojPath = Join-Path -Path $env:Project_Directory -ChildPath "KadampaScreenSaver.csproj"
          $csproj = [xml](Get-Content $csprojPath)
          $version = $csproj.Project.PropertyGroup.Version
          echo "VERSION=$version" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Build the application
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform="${{ matrix.platform }}"
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Publish the application
        run: msbuild $env:Solution_Name /t:Publish /p:WindowsPackageType=None /p:Configuration=$env:Configuration /p:Platform="${{ matrix.platform }}"
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Create ZIP of unpackaged app
        run: Compress-Archive -Path "KadampaScreenSaver/bin/Release/net8.0/publish/*" -DestinationPath "KadampaScreenSaver/KadampaScreenSaver-${{ env.VERSION }}.zip"
  
      - name: Upload unpackaged app
        uses: actions/upload-artifact@v4
        with:
          name: KadampaScreenSaver-${{ env.VERSION }}.zip
          path: KadampaScreenSaver/KadampaScreenSaver-${{ env.VERSION }}.zip

      - name: Create or update GitHub Release
        shell: pwsh
        run: |
          $releaseTag = $env:VERSION
          $release = gh release view $releaseTag --json tagName --jq '.tagName' 2>$null
      
          if ($release -eq $releaseTag) {
            Write-Host "Release with tag $releaseTag already exists. Updating release..."
            gh release edit $releaseTag --title "Release $releaseTag" --notes "Release notes for version $releaseTag" --add-assets "KadampaScreenSaver/KadampaScreenSaver-$releaseTag.zip"
          }
          else {
            Write-Host "Creating a new release with tag $releaseTag..."
            gh release create $releaseTag --title "Release $releaseTag" --notes "Release notes for version $releaseTag" "KadampaScreenSaver/KadampaScreenSaver-$releaseTag.zip" --target main
          }
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
